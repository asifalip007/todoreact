{"version":3,"sources":["components/ListTask.js","components/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Div","Checkinput","input","Textinput","Button","button","ListTask","props","items","value","map","item","key","id","type","checked","onChange","e","target","editTask","className","onClick","deleteTasks","Form","form","Span","span","AddTask","inputHandler","setState","currenttask","Date","now","submitHandler","preventDefault","newitem","state","newitems","tasklist","allCheck","deleteItems","filtered","filter","all","length","taskEdit","updated","allChecked","current","console","log","checkHandler","check","bind","onSubmit","this","placeholder","Component","Navbar","Body","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d02dd92.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\nwidth: 100%;\r\nmargin: 0px auto;\r\nheight: auto;\r\n`\r\nconst Div = styled.div`\r\nwidth: 100%;\r\ndisplay: flex;\r\njustify-content: flex-start;\r\npadding-top: 10px;\r\n\r\n.striked{\r\n    text-decoration: line-through;\r\n}\r\n`\r\nconst Checkinput = styled.input`\r\njustify-content: left;\r\nmargin: auto 0px;\r\n`\r\nconst Textinput = styled.input`\r\nwidth: 80%;\r\nheight: auto;\r\npadding: 5px 20px;\r\nfont-size: 1em;\r\noutline: none;\r\nborder: none;\r\n`\r\nconst Button = styled.button`\r\nwidth: 30%;\r\nheight: auto;\r\nmargin-left: 5px;\r\nfont-size: 1em;\r\nborder: 1px solid red;\r\nborder-radius: 10px;\r\nbackground-color: red;\r\ncolor: white;\r\noutline:none;\r\ncursor: pointer;\r\n`\r\n\r\nfunction ListTask(props) {\r\n\r\n    const items = props.value;\r\n    return (\r\n        <Wrapper>\r\n            {\r\n                items.map((item) => {\r\n                    return (\r\n                        <Div key={item.id}>\r\n                            <Checkinput type='checkbox' id='all' checked={item.checked} onChange={(e) => props.checked(e.target.checked,item.id)}/>\r\n                            <Textinput type='text' value={item.value} onChange={(e) => { props.editTask(e.target.value, item.id) }} className={item.checked?'striked':null}/>\r\n                            <Button onClick={() => props.deleteTasks(item.id)}>Delete Task</Button>\r\n                        </Div>\r\n                    )\r\n                })\r\n            }\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ListTask\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport ListTask from './ListTask';\r\n\r\nconst Wrapper = styled.div`\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-direction: column;\r\nmargin: 0px auto;\r\n`\r\nconst Div = styled.div`\r\nwidth: 100%;\r\ndisplay: flex;\r\njustify-content: flex-start;\r\npadding-top: 10px\r\n`\r\nconst Form = styled.form`\r\nwidth: 100%;\r\ndisplay: flex;\r\njustify-content: flex-start;\r\n`\r\nconst Textinput = styled.input`\r\nwidth: 80%;\r\nheight: auto;\r\npadding: 5px 20px;\r\nfont-size: 1em;\r\noutline: none;\r\nborder: 1px solid black;\r\nborder-radius: 10px;\r\n`\r\nconst Checkinput = styled.input`\r\njustify-content: left;\r\nmargin: 10px 0px 20px;\r\n`\r\nconst Button = styled.button`\r\nwidth: 20%;\r\nheight: auto;\r\nmargin-left: 5px;\r\nfont-size: 1em;\r\nborder: 1px solid green;\r\nborder-radius: 10px;\r\nbackground-color: green;\r\ncolor: white;\r\noutline:none;\r\ncursor: pointer;\r\n`\r\nconst Span = styled.span`\r\npadding: 5px 5px;\r\n`\r\n\r\nexport class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currenttask: {\r\n                value: '',\r\n                id: '',\r\n                checked: false,\r\n            },\r\n            tasklist: [],\r\n            allCheck: false,\r\n        }\r\n        this.inputHandler = this.inputHandler.bind(this);\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n        this.allChecked = this.allChecked.bind(this);\r\n        this.deleteItems = this.deleteItems.bind(this);\r\n        this.taskEdit = this.taskEdit.bind(this);\r\n    }\r\n    inputHandler = (e) => {\r\n        this.setState({\r\n            currenttask: {\r\n                value: e.target.value,\r\n                id: Date.now(),\r\n                checked: false\r\n            }\r\n        })\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault()\r\n        const newitem = this.state.currenttask;\r\n        if (newitem.value !== '') {\r\n            const newitems = [...this.state.tasklist, newitem]\r\n            this.setState({\r\n                tasklist: newitems,\r\n                currenttask: {\r\n                    value: '',\r\n                    id: '',\r\n                    checked: false,\r\n                },\r\n                allCheck: false,\r\n            })\r\n        }\r\n    }\r\n    deleteItems = (key) => {\r\n        const filtered = this.state.tasklist.filter((item) => item.id !== key);\r\n        let all = this.state.allCheck;\r\n        if (filtered.length === 0){\r\n            all = false\r\n        }\r\n        this.setState({\r\n            tasklist: filtered,\r\n            allCheck: all\r\n        })\r\n    }\r\n    taskEdit = (value, key) => {\r\n        const updated = this.state.tasklist\r\n        updated.map((item) => {\r\n            if (item.id === key) {\r\n                item.value = value\r\n            }\r\n        })\r\n        this.setState({\r\n            tasklist: updated\r\n        })\r\n    }\r\n    allChecked = () => {\r\n        const current= this.state.allCheck;\r\n        const items = this.state.tasklist;\r\n        items.map((item) => {\r\n            item.checked = !current\r\n        })\r\n        this.setState({\r\n            tasklist: items,\r\n            allCheck: !current\r\n        })\r\n        console.log(items)\r\n    }\r\n    checkHandler = (check,key) => {\r\n        const items = this.state.tasklist;\r\n        let current = true;\r\n        items.map((item) => {\r\n            if (item.id === key){\r\n                item.checked = check\r\n                if(item.checked === false){\r\n                    current = false\r\n                }\r\n            }\r\n            if (item.checked === false){\r\n                current = false\r\n            }\r\n        })\r\n        this.setState({\r\n            tasklist: items,\r\n            allCheck: current\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Wrapper>\r\n                <Form onSubmit={this.submitHandler} >\r\n                    <Textinput type='text' value={this.state.currenttask.value} placeholder='Enter task' onChange={this.inputHandler} />\r\n                    <Button> Add Task </Button>\r\n                </Form>\r\n                <Div>\r\n                    <Checkinput type='checkbox' checked={this.state.allCheck} onChange={this.allChecked} />\r\n                    <Span>Select All</Span>\r\n                </Div>\r\n                <Div>\r\n                    *Please click on the entries in log to edit.\r\n                </Div>\r\n                <ListTask value={this.state.tasklist} deleteTasks={this.deleteItems} editTask={this.taskEdit} checked={this.checkHandler}/>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTask\r\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport AddTask from './components/AddTask';\n\nconst Wrapper = styled.div`\nmargin: 0px auto;\n`\nconst Navbar = styled.div`\nwidth: 60vw;\nheight: auto;\nmargin: 0px auto;\nbackground-color: black;\ncolor: white;\nfont-size: 2.5rem;\npadding: 10px 20px;\n`\n\nconst Body = styled.div`\nwidth: 60vw;\nheight: auto;\nmargin: 30px auto;\npadding: 10px 20px;\n`\n\nexport class App extends Component {\n  componentDidMount(){\n    document.title = `Todo List`\n  }\n  render() {\n    return (\n      <Wrapper>\n        <Navbar>Todo List</Navbar>\n        <Body>\n          <AddTask />\n        </Body>\n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n     <App />\n   </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}